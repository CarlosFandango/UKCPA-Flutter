// Mocks generated by Mockito 5.4.4 from annotations
// in ukcpa_flutter/test/unit/providers/basket_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ukcpa_flutter/domain/entities/basket.dart' as _i2;
import 'package:ukcpa_flutter/domain/repositories/basket_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBasket_0 extends _i1.SmartFake implements _i2.Basket {
  _FakeBasket_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBasketOperationResult_1 extends _i1.SmartFake
    implements _i2.BasketOperationResult {
  _FakeBasketOperationResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BasketRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBasketRepository extends _i1.Mock implements _i3.BasketRepository {
  MockBasketRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Basket> initBasket() => (super.noSuchMethod(
        Invocation.method(
          #initBasket,
          [],
        ),
        returnValue: _i4.Future<_i2.Basket>.value(_FakeBasket_0(
          this,
          Invocation.method(
            #initBasket,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Basket>);

  @override
  _i4.Future<_i2.Basket?> getBasket() => (super.noSuchMethod(
        Invocation.method(
          #getBasket,
          [],
        ),
        returnValue: _i4.Future<_i2.Basket?>.value(),
      ) as _i4.Future<_i2.Basket?>);

  @override
  _i4.Future<_i2.BasketOperationResult> addItem(
    String? itemId, {
    required String? itemType,
    bool? payDeposit,
    String? assignToUserId,
    DateTime? chargeFromDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addItem,
          [itemId],
          {
            #itemType: itemType,
            #payDeposit: payDeposit,
            #assignToUserId: assignToUserId,
            #chargeFromDate: chargeFromDate,
          },
        ),
        returnValue: _i4.Future<_i2.BasketOperationResult>.value(
            _FakeBasketOperationResult_1(
          this,
          Invocation.method(
            #addItem,
            [itemId],
            {
              #itemType: itemType,
              #payDeposit: payDeposit,
              #assignToUserId: assignToUserId,
              #chargeFromDate: chargeFromDate,
            },
          ),
        )),
      ) as _i4.Future<_i2.BasketOperationResult>);

  @override
  _i4.Future<_i2.BasketOperationResult> removeItem(
    String? itemId,
    String? itemType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeItem,
          [
            itemId,
            itemType,
          ],
        ),
        returnValue: _i4.Future<_i2.BasketOperationResult>.value(
            _FakeBasketOperationResult_1(
          this,
          Invocation.method(
            #removeItem,
            [
              itemId,
              itemType,
            ],
          ),
        )),
      ) as _i4.Future<_i2.BasketOperationResult>);

  @override
  _i4.Future<bool> destroyBasket() => (super.noSuchMethod(
        Invocation.method(
          #destroyBasket,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.BasketOperationResult> useCreditForBasket(bool? useCredit) =>
      (super.noSuchMethod(
        Invocation.method(
          #useCreditForBasket,
          [useCredit],
        ),
        returnValue: _i4.Future<_i2.BasketOperationResult>.value(
            _FakeBasketOperationResult_1(
          this,
          Invocation.method(
            #useCreditForBasket,
            [useCredit],
          ),
        )),
      ) as _i4.Future<_i2.BasketOperationResult>);

  @override
  _i4.Future<_i2.BasketOperationResult> applyPromoCode(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #applyPromoCode,
          [code],
        ),
        returnValue: _i4.Future<_i2.BasketOperationResult>.value(
            _FakeBasketOperationResult_1(
          this,
          Invocation.method(
            #applyPromoCode,
            [code],
          ),
        )),
      ) as _i4.Future<_i2.BasketOperationResult>);

  @override
  _i4.Future<_i2.BasketOperationResult> removePromoCode() =>
      (super.noSuchMethod(
        Invocation.method(
          #removePromoCode,
          [],
        ),
        returnValue: _i4.Future<_i2.BasketOperationResult>.value(
            _FakeBasketOperationResult_1(
          this,
          Invocation.method(
            #removePromoCode,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BasketOperationResult>);

  @override
  _i4.Stream<_i2.Basket?> watchBasket() => (super.noSuchMethod(
        Invocation.method(
          #watchBasket,
          [],
        ),
        returnValue: _i4.Stream<_i2.Basket?>.empty(),
      ) as _i4.Stream<_i2.Basket?>);

  @override
  _i4.Future<int> getBasketItemCount() => (super.noSuchMethod(
        Invocation.method(
          #getBasketItemCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<bool> isItemInBasket(
    String? itemId,
    String? itemType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isItemInBasket,
          [
            itemId,
            itemType,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
